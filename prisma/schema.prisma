// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Venue {
  id        String   @id @default(cuid())
  latitude  String?  @db.VarChar(32)
  longitude String?  @db.VarChar(32)
  street    String   @db.VarChar(32)
  city      String   @db.VarChar(32)
  imageUrl  String?  @db.VarChar(32)
  country   String   @db.VarChar(32)
  createdAt DateTime @default(now())
  event     Event[]

  @@unique([id])
}

model Organizer {
  id        String    @id @default(cuid())
  firstName String    @db.VarChar(40)
  lastName  String    @db.VarChar(40)
  fullName  String    @db.VarChar(80)
  email     String    @unique
  phone     String    @db.VarChar(32)
  createdAt DateTime  @default(now())
  lastLogin DateTime?
  profile   Profile?
  profileId String?   @unique
  role      ROLE      @default(ORGANIZER)

  @@unique([email, phone], name: "emailPhoneKey")
}

model User {
  id             String    @id @default(cuid())
  firstName      String    @db.VarChar(40)
  lastName       String    @db.VarChar(40)
  fullName       String    @db.VarChar(80)
  email          String    @unique
  phone          String    @db.VarChar(32)
  createdAt      DateTime  @default(now())
  lastLogin      DateTime?
  isVerified     Boolean   @default(false)
  role           ROLE      @default(USER)
  eventsAttended Guest[]

  @@unique([email, phone], name: "emailPhoneKey")
}

model Profile {
  id          String    @id @default(cuid())
  isVerified  Boolean   @default(false)
  city        String?
  street      String?   @db.VarChar(32)
  companyName String?   @db.VarChar(32)
  jobTitle    String?   @db.VarChar(32)
  organizer   Organizer @relation(fields: [organizerId], references: [id])
  organizerId String    @unique
}

model Event {
  id          String    @id @default(cuid())
  venue       Venue     @relation(fields: [venueId], references: [id])
  venueId     String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  isPublic    Boolean   @default(true)
  day         String    @db.VarChar(32)
  date        DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  organizerId String
  guests      Guest[]
}

model Guest {
  id        String    @id @default(cuid())
  event     Event     @relation(fields: [eventId], references: [id])
  eventId   String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    String
}

model Category {
  id    String  @id @default(cuid())
  name  String  @unique @db.VarChar(128)
  event Event[]
}

model Token {
  id           String   @id @default(cuid())
  ownerId      String   @db.VarChar(32)
  token        String   @unique @db.VarChar(128)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  refreshToken String   @db.VarChar(45)
}

enum ROLE {
  USER
  ORGANIZER
}
